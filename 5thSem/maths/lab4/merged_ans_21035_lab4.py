# -*- coding: utf-8 -*-
"""task4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18p9Jx0b7Hk0Sm5UJPCPsulLjAueE5zHo

Question-1
"""

import numpy as np
import matplotlib.pyplot as plt
q0 = 10
R = 60
L = 9
C = 0.00005
t_append = []
charge1 = []
for t in np.arange(0, 0.9, 0.01):
    charge = q0 * np.exp(-(R * t) / (2 * L)) * np.cos(np.sqrt((1 / (L * C)) - (R / (2 * L))**2) * t)
    t_append.append(t)
    charge1.append(charge)
    print("t=",t,"charge=",charge)
plt.plot(t_append, charge1)
plt.title("Question -1 ")
plt.show()

"""Question-2"""

density_append = []
z_append = []
for z in range(-5,5):
    density_function = (1/np.sqrt(2*np.pi))*np.exp((-z**2)/2)
    density_append.append(density_function)
    z_append.append(z)
    print("z=",z,"density=",density_function)
plt.plot(z_append,density_append)
plt.xlabel('z')
plt.ylabel('Frequency')
plt.title("Question - 2 ")
plt.show()

"""Question -3"""

n = [0.035,0.020,0.015,0.030,0.022]
S = [0.0001,0.0002,0.0010,0.0007,0.0003]
B = [10,8,20,24,15]
H = [2,1,1.5,3,2.5]

Manning_equation_append = []
matrix = np.matrix([n,S,B,H])
i_append = []
for i  in range(4):
    Manning_equation = (np.sqrt(S[i])/n[i])*(((B[i]*H[i])/(B[i]+2*H[i]))**2/3)
    Manning_equation_append.append(Manning_equation)
    i_append.append(i)
    print("i=",i,"Manning_equation=",Manning_equation)
    #
plt.plot(i_append,Manning_equation_append)
plt.title("Question - 3 ")
plt.show()

"""Question-4"""

import numpy as np
import matplotlib.pyplot as plt

g = 9.81
v0 = 28
y0 = 0
angles = np.arange(15, 75 + 15, 15)
distances = np.arange(0, 80 + 5, 5)

theta = np.deg2rad(angles)

results = np.zeros((len(distances), len(angles)))

for i in range(len(angles)):
    for j in range(len(distances)):
        x = distances[j]
        results[j, i] = y0 + x * np.tan(theta[i]) - (g * x**2) / (2 * v0**2 * np.cos(theta[i])**2)

plt.figure()
plt.plot(distances, results, linewidth=2)
plt.xlabel('Horizontal Distance (m)')
plt.ylabel('Height (m)')
plt.title('Projectile Trajectories')
plt.legend([f'Angle = {angle}Â°' for angle in angles], loc='best')
plt.axis([0, 80, 0, np.max(results)])
plt.title("Question - 4 ")
plt.show()

"""Question - 5"""

import numpy as np
import matplotlib.pyplot as plt

def butterfly_curve(theta):
    r = np.exp(np.sin(theta)) - 2 * np.cos(4 * theta) - np.sin((2 * theta - np.pi) / 24) ** 5
    return r

theta_values = np.arange(0, 8 * np.pi, np.pi / 32)

r_values = butterfly_curve(theta_values)

plt.polar(theta_values, r_values, 'r--',color='blue')
plt.title('Butterfly Curve')
plt.title("Question - 5 ")
plt.show()